#include <iostream>

using namespace std;

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

ListNode* reverseKGroup(ListNode* head, int k) {
    if (!head || k == 1) return head; // No need to reverse

    ListNode* dummy = new ListNode(0);
    dummy->next = head;
    ListNode *cur = dummy, *nex = dummy, *pre = dummy;
    int count = 0;

    while (cur->next) {
        cur = cur->next;
        count++;
    }

    while (count >= k) {
        cur = pre->next;
        nex = cur->next;
        for (int i = 1; i < k; ++i) {
            cur->next = nex->next;
            nex->next = pre->next;
            pre->next = nex;
            nex = cur->next;
        }
        pre = cur;
        count -= k;
    }

    return dummy->next;
}

// Utility function to create a linked list from a vector
ListNode* createList(const vector<int>& values) {
    ListNode* dummy = new ListNode(0);
    ListNode* tail = dummy;
    for (int val : values) {
        tail->next = new ListNode(val);
        tail = tail->next;
    }
    return dummy->next; // Skip the dummy node
}

// Utility function to print a linked list
void printList(ListNode* head) {
    while (head) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    // Example usage
    vector<int> values = {1, 2, 3, 4, 5};
    int k = 2;

    ListNode* head = createList(values);
    cout << "Original list: ";
    printList(head);

    ListNode* reversedHead = reverseKGroup(head, k);
    cout << "Reversed list in groups of " << k << ": ";
    printList(reversedHead);

    return 0;
}
