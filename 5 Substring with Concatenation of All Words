#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

vector<int> findSubstring(string s, vector<string>& words) {
    vector<int> result;
    if (s.empty() || words.empty()) return result;

    int wordLength = words[0].size();
    int wordCount = words.size();
    int totalLength = wordLength * wordCount;

    unordered_map<string, int> wordFreq;
    for (const string& word : words)
        wordFreq[word]++;

    for (int i = 0; i <= (int)s.size() - totalLength; ++i) {
        unordered_map<string, int> seen;
        int j = 0;
        for (; j < wordCount; ++j) {
            string word = s.substr(i + j * wordLength, wordLength);
            if (wordFreq.find(word) != wordFreq.end()) {
                seen[word]++;
                if (seen[word] > wordFreq[word])
                    break;
            } else {
                break;
            }
        }
        if (j == wordCount)
            result.push_back(i);
    }

    return result;
}

int main() {
    string s = "barfoothefoobarman";
    vector<string> words = {"foo", "bar"};

    vector<int> indices = findSubstring(s, words);
    cout << "Indices of substrings: ";
    for (int idx : indices) {
        cout << idx << " ";
    }
    cout << endl;

    return 0;
}

