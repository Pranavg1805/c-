#include <iostream>
#include <queue>
#include <vector>

using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

struct CompareNodes {
    bool operator()(ListNode* a, ListNode* b) {
        return a->val > b->val; // min-heap based on node values
    }
};

ListNode* mergeKLists(vector<ListNode*>& lists) {
   
    priority_queue<ListNode*, vector<ListNode*>, CompareNodes> pq;

    for (ListNode* head : lists) {
        if (head) {
            pq.push(head);
        }
    }

    ListNode* dummy = new ListNode(0);
    ListNode* tail = dummy;
    while (!pq.empty()) {
        // Pop the smallest node
        ListNode* minNode = pq.top();
        pq.pop();

        // Append the node to the result list
        tail->next = minNode;
        tail = tail->next;
        if (minNode->next) {
            pq.push(minNode->next);
        }
    }

    return dummy->next; // Skip the dummy node
}

ListNode* createList(const vector<int>& values) {
    ListNode* dummy = new ListNode(0);
    ListNode* tail = dummy;
    for (int val : values) {
        tail->next = new ListNode(val);
        tail = tail->next;
    }
    return dummy->next; // Skip the dummy node
}

void printList(ListNode* head) {
    while (head) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    vector<vector<int>> listsData = {
        {1, 4, 5},
        {1, 3, 4},
        {2, 6}
    };

    vector<ListNode*> lists;
    for (const auto& data : listsData) {
        lists.push_back(createList(data));
    }

    cout << "Input lists:\n";
    for (auto list : lists) {
        printList(list);
    }

    ListNode* mergedList = mergeKLists(lists);
    cout << "\nMerged list:\n";
    printList(mergedList);

    return 0;
}
